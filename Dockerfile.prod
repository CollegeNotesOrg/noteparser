# Multi-stage production Dockerfile for NoteParser
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for building
RUN useradd --create-home --shell /bin/bash noteparser

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt requirements-prod.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements-prod.txt

# Copy source code
COPY . .

# Build the package
RUN pip install --no-cache-dir -e .

# Production stage
FROM python:3.11-slim as production

# Set build metadata
LABEL maintainer="CollegeNotesOrg" \
      version="${VERSION}" \
      description="NoteParser - AI-powered academic document processing" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}"

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    tini \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN useradd --create-home --shell /bin/bash --uid 1001 noteparser

# Set working directory
WORKDIR /app

# Copy Python environment from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=noteparser:noteparser . .

# Create necessary directories
RUN mkdir -p /app/data /app/uploads /app/logs /app/config && \
    chown -R noteparser:noteparser /app

# Switch to non-root user
USER noteparser

# Set environment variables
ENV PYTHONPATH=/app/src \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    NOTEPARSER_ENV=production \
    FLASK_ENV=production \
    FLASK_APP=noteparser.web.app:create_app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Expose port
EXPOSE 5000

# Use tini as init system
ENTRYPOINT ["/usr/bin/tini", "--"]

# Default command
CMD ["gunicorn", "--config", "gunicorn.conf.py", "noteparser.web.app:create_app()"]